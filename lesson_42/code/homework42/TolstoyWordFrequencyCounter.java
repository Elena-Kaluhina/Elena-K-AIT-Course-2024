package homework42;

import java.util.HashMap;
import java.util.Map;

public class TolstoyWordFrequencyCounter {

    public static void main(String[] args) {

        // Текст Толстого
        String text = "В 1800-х годах, в те времена, когда не было еще ни железных, ни шоссейных дорог, ни газового,ни стеаринового света, ни пружинных низких диванов, ни мебели без лаку, ни разочарованных юношей со стеклышками, ни либеральных философов-женщин, ни милых дам-камелий, которых так много развелось в наше время, – в те наивные времена, когда из Москвы, выезжая в Петербург в повозке или карете, брали с собой целую кухню домашнего приготовления, ехали восемь суток по мягкой, пыльной или грязной дороге и верили в пожарские котлеты, в валдайские колокольчики и бублики, – когда в длинные осенние вечера нагорали сальные свечи, освещая семейные кружки из двадцати и тридцати человек, на балах в канделябры вставлялись восковые и спермацетовые свечи, когда мебель ставили симметрично, когда наши отцы были еще молоды не одним отсутствием морщин и седых волос, а стрелялись за женщин и из другого угла комнаты бросались поднимать нечаянно и не нечаянно уроненные платочки, наши матери носили коротенькие талии и огромные рукава и решали семейные дела выниманием билетиков, когда прелестные дамы-камелии прятались от дневного света, – в наивные времена масонских лож, мартинистов, тугендбунда, во времена Милорадовичей, Давыдовых, Пушкиных, – в губернском городе К. был съезд помещиков, и кончались дворянские выборы.";

        // Удаляем знаки препинания и приводим текст к нижнему регистру
        text = text.replaceAll("[^a-zA-Zа-яА-Я0-9\\s]", "").toLowerCase();

        // Разделяем текст на слова
        String[] words = text.split("\\s+");

        // Используем Map для подсчета частоты слов
        Map<String, Integer> wordFrequency = new HashMap<>();
        for (String word : words) {
            if (!word.isEmpty()) {
                wordFrequency.put(word, wordFrequency.getOrDefault(word, 0) + 1);
            }
        }

        // Выводим результат
        for (Map.Entry<String, Integer> entry : wordFrequency.entrySet()) {
            System.out.println("Word: " + entry.getKey() + ", Frequency: " + entry.getValue());
        }
    }
}

//Удаление знаков препинания и приведение к нижнему регистру: Мы используем replaceAll("[^a-zA-Zа-яА-Я0-9\\s]", "")
// для удаления всех символов, кроме букв и цифр. Затем приводим строку к нижнему регистру для унификации.
//Разделение текста на слова: Метод split("\\s+") разбивает строку на слова по пробелам.
//Подсчет частоты слов: Для подсчета частоты используется HashMap, где каждое слово добавляется как ключ, а его
// количество — как значение. Если слово уже встречалось, его значение увеличивается на единицу.

//Мы не знаем заранее, какие именно слова нужно подсчитывать. В этом случае, чтобы учесть все уникальные слова, мы обрабатываем весь текст и добавляем в карту каждое слово, встреченное в тексте. Таким образом, в Map заносятся все уникальные слова с их частотой появления.
//
//Как это работает:
//Разделение текста на слова: Мы разбиваем текст на слова, удалив знаки препинания и приведя текст к нижнему регистру. Это позволяет учитывать слова, например, "время" и "Время" как одно и то же слово.
//Добавление в Map: При обработке каждого слова мы проверяем, встречалось ли оно уже:
//Если слово уже есть в Map, мы увеличиваем его счетчик на 1.
//Если слова еще нет в Map, мы добавляем его с начальным значением 1.
//Результат: После обработки всего текста в Map будет набор уникальных слов с количеством их вхождений. Этот способ не требует знания, какие именно слова мы ищем, так как Map динамически формирует список уникальных слов и считает их частоту.

